1. Create dynamic team pages accessible via `team.html?team=TeamName`,common.css styling should be applied to all the pages
2. Show next match information with team logos and match details, copy the styling from view-source 
3. Display last 5 matches played with scores and opponent logos, copy the styling from view-source 
4. Style elements with appropriate colors for wins/draws/losses
5. Link all team names/logos across the site to their respective pages, make sure the team name styling is preserved, don't add link blue color or underline.
The rest of the code remains unchanged, ensuring all functionality and styling are preserved.

here's the tree of my website 
Soccer/
├── css/
│   ├── common.css
│   ├── table.css
│   ├── scores.css
│   └── players.css
├── js/
│   ├── table.js
│   ├── scores.js
│   └── players.js
├── data/
│   ├── gameweek.json
│   ├── data.json
│   ├── scores_fixtures.json
│   └── players.json
├── logos/
│   └── (all team logos)
├── index.html
├── scores.html
└── players.html

1.index.html
"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Premier League Table</title>
    <link rel="stylesheet" href="css/common.css">
    <link rel="stylesheet" href="css/table.css">
</head>
<body>
    <!-- Navigation Bars -->
    <nav class="global-nav">
        <div class="nav-container">
            <button class="mobile-menu-btn">
                <span></span>
            </button>
        </div>
    </nav>

    <nav class="sub-nav">
        <div class="sub-nav-container">
            <a href="index.html" class="sub-nav-link active">Tables</a>
            <a href="scores.html" class="sub-nav-link">Scores & Fixtures</a>
            <a href="players.html" class="sub-nav-link">Players Stats</a>
        </div>
    </nav>

    <!-- Table Container -->
    <div class="table-container">
        <h1>Premier League Table</h1>
        <div id="loading" class="loading">Loading...</div>
        <div id="error" class="error" style="display: none;"></div>
        <table id="leagueTable">
            <thead>
                <tr>
                    <th>Pos</th>
                    <th>Team</th>
                    <th>MP</th>
                    <th class="mobile-hide">W</th>
                    <th class="mobile-hide">D</th>
                    <th class="mobile-hide">L</th>
                    <th class="mobile-hide">GF</th>
                    <th class="mobile-hide">GA</th>
                    <th>GD</th>
                    <th>Pts</th>
                    <th class="mobile-hide">Form</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>

        <!-- Key Container -->
        <div class="key-container">
            <h2>Key</h2>
            <ul>
                <li>Position 1 - 4 : UEFA Champions League</li>
                <li>Position 5 : UEFA Europa League</li>
                <li>Position 18 - 20 : Relegation</li>
            </ul>
        </div>

        <!-- Last Updated Time -->
        <div class="last-updated"></div>
    </div>

    <script src="js/table.js"></script>
</body>
</html>"

2.scores.html
"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Premier League Scores & Fixtures</title>
    <link rel="stylesheet" href="css/common.css">
    <link rel="stylesheet" href="css/scores.css">
</head>
<body>
    <nav class="global-nav">
        <div class="nav-container">
            <button class="mobile-menu-btn">
                <span></span>
            </button>
        </div>
    </nav>

    <nav class="sub-nav">
        <div class="sub-nav-container">
            <a href="index.html" class="sub-nav-link">Tables</a>
            <a href="scores.html" class="sub-nav-link active">Scores & Fixtures</a>
            <a href="players.html" class="sub-nav-link">Players Stats</a>
        </div>
    </nav>

    <div class="fixtures-container">
        <h1>Premier League Fixtures</h1>
        <div class="gameweek-nav">
            <div class="gameweek-buttons" id="gameweek-buttons"></div>
        </div>
        
        <div id="loading" class="loading">Loading...</div>
        <div id="error" class="error" style="display: none;"></div>
        <div id="fixtures-list"></div>
    </div>

    <script src="js/scores.js"></script>
</body>
</html>"

3. players.html
"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Premier League Player Stats</title>
    <link rel="stylesheet" href="css/common.css">
    <link rel="stylesheet" href="css/players.css">
</head>
<body>
    <nav class="global-nav">
        <div class="nav-container">
            <button class="mobile-menu-btn">
                <span></span>
            </button>
        </div>
    </nav>

    <nav class="sub-nav">
        <div class="sub-nav-container">
            <a href="index.html" class="sub-nav-link">Tables</a>
            <a href="scores.html" class="sub-nav-link">Scores & Fixtures</a>
            <a href="players.html" class="sub-nav-link active">Players Stats</a>
        </div>
    </nav>
    
    <h1 class="main-heading">Premier League Players Stats</h1>
    <div class="stats-container">
        <div id="loading" class="loading">Loading player data...</div>
        <div id="error" class="error" style="display: none;"></div>

        <!-- Stats Containers -->
        <div class="stat-box">
            <h2 class="stat-title">Top Scorers</h2>
            <div id="goals-list"></div>
        </div>

        <div class="stat-box">
            <h2 class="stat-title">Assists</h2>
            <div id="assists-list"></div>
        </div>

        <div class="stat-box">
            <h2 class="stat-title">Expected Goals</h2>
            <div id="xg-list"></div>
        </div>

        <div class="stat-box">
            <h2 class="stat-title">Expected Assists</h2>
            <div id="xa-list"></div>
        </div>

        <div class="stat-box">
            <h2 class="stat-title">Shots</h2>
            <div id="shots-list"></div>
        </div>

        <div class="stat-box">
            <h2 class="stat-title">Key Passes</h2>
            <div id="key-passes-list"></div>
        </div>

        <div class="stat-box">
            <h2 class="stat-title">Yellow Cards</h2>
            <div id="yellow-cards-list"></div>
        </div>

        <div class="stat-box">
            <h2 class="stat-title">Red Cards</h2>
            <div id="red-cards-list"></div>
        </div>
    </div>

    <script src="js/players.js"></script>
</body>
</html>"

4. scrape.py
"import requests
from bs4 import BeautifulSoup
import json
import re

# Team logo URLs (using FULL team names as keys)
team_logos = {
    "Arsenal": "logos/ARS.png",
    "Aston Villa": "logos/AVL.png",
    "AFC Bournemouth": "logos/BOU.png",
    "Brentford": "logos/BRE.png",
    "Brighton & Hove Albion": "logos/BHA.png",
    "Chelsea": "logos/CHE.png",
    "Crystal Palace": "logos/CRY.png",
    "Everton": "logos/EVE.png",
    "Fulham": "logos/FUL.png",
    "Liverpool": "logos/LIV.png",
    "Leicester City": "logos/LEI.png",
    "Manchester City": "logos/MCI.png",
    "Manchester United": "logos/MUN.png",
    "Newcastle United": "logos/NEW.png",
    "Nottingham Forest": "logos/NFO.png",
    "Southampton": "logos/SOU.png",
    "Ipswich Town": "logos/IPS.png",
    "Tottenham Hotspur": "logos/TOT.png",
    "West Ham United": "logos/WHU.png",
    "Wolverhampton Wanderers": "logos/WOL.png",
}

# Team name mapping (scraped names → full names)
team_name_mapping = {
    "Nottm Forest": "Nottingham Forest",
    "Man City": "Manchester City",
    "Man Utd": "Manchester United",
    "Newcastle": "Newcastle United",
    "Wolves": "Wolverhampton Wanderers",
    "Tottenham": "Tottenham Hotspur",
    "West Ham": "West Ham United",
    "Leicester": "Leicester City",
    "Bournemouth": "AFC Bournemouth",
    "Brighton": "Brighton & Hove Albion",
    "Ipswich": "Ipswich Town",
    "Nott'ham Forest": "Nottingham Forest",
    "Newcastle Utd": "Newcastle United",
    "Manchester Utd": "Manchester United",
    "Nottingham F": "Nottingham Forest",
    "Manchester C": "Manchester City",
    "Wolverhampton...": "Wolverhampton Wanderers",
    "Manchester U": "Manchester United",
    "Newcastle Un": "Newcastle United",
    "Leicester C": "Leicester City",
    "Brighton &": "Brighton & Hove Albion",
    "AFC Bournem": "AFC Bournemouth",
    "Ipswich Tow": "Ipswich Town",
    "Tottenham H": "Tottenham Hotspur",
}

# Scrape Understat data
url_understat = "https://understat.com/league/EPL"
response = requests.get(url_understat)
soup = BeautifulSoup(response.content, 'html.parser')

# Extract Understat JSON data
for script in soup.find_all('script'):
    if 'JSON.parse' in script.text:
        json_str = script.text.split("JSON.parse('")[1].split("')")[0]
        decoded_data = json_str.encode().decode('unicode_escape')
        data_understat = json.loads(decoded_data)
        break

# Process match results
teams = {}
for match in data_understat:
    if match['isResult']:
        home = team_name_mapping.get(match['h']['title'], match['h']['title'])
        away = team_name_mapping.get(match['a']['title'], match['a']['title'])
        h_goals = int(match['goals']['h'])
        a_goals = int(match['goals']['a'])

        teams.setdefault(home, {'matches': 0, 'wins': 0, 'draws': 0, 'losses': 0, 'gf': 0, 'ga': 0})
        teams.setdefault(away, {'matches': 0, 'wins': 0, 'draws': 0, 'losses': 0, 'gf': 0, 'ga': 0})

        for team, goals_for, goals_against in [(home, h_goals, a_goals), (away, a_goals, h_goals)]:
            teams[team]['matches'] += 1
            teams[team]['gf'] += goals_for
            teams[team]['ga'] += goals_against

        if h_goals > a_goals:
            teams[home]['wins'] += 1
            teams[away]['losses'] += 1
        elif a_goals > h_goals:
            teams[away]['wins'] += 1
            teams[home]['losses'] += 1
        else:
            teams[home]['draws'] += 1
            teams[away]['draws'] += 1

# Scrape form data from The Athletic
url_athletic = "https://www.nytimes.com/athletic/football/premier-league/standings/"
headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
response_athletic = requests.get(url_athletic, headers=headers)
response_athletic.raise_for_status()

soup_athletic = BeautifulSoup(response_athletic.content, 'html.parser')
form_data = {}
table_athletic = soup_athletic.find('table', {'class': 'grqrjN'})

if table_athletic:
    for row in table_athletic.find_all('tr')[1:]:
        columns = row.find_all('td')
        if len(columns) >= 9:
            team_cell = columns[0].find('a')
            if team_cell:
                team_str = team_cell.text.strip()
                # Clean team name
                team_str_clean = re.sub(r'^\d+', '', team_str)
                if len(team_str_clean) >= 3 and team_str_clean[-3:].isupper():
                    team_part = team_str_clean[:-3].strip()
                else:
                    team_part = team_str_clean.strip()
                full_name = team_name_mapping.get(team_part, team_part)
                
                # Extract last 5 matches
                form_cell = columns[-1]
                form_elements = form_cell.find_all('div', class_=lambda x: x and x.startswith('sc-'))
                form_chars = []
                for e in form_elements:
                    form_chars.extend(list(e.text.strip()))  # Split into individual characters
                
                # Keep only last 5 results and format
                last_5 = form_chars[-5:]
                form = ' '.join(last_5)
                
                form_data[full_name] = form

# Prepare final standings
standings = []
for team, stats in teams.items():
    standings.append({
        'team': team,
        'logo': team_logos.get(team),
        **stats,
        'gd': stats['gf'] - stats['ga'],
        'points': (stats['wins'] * 3) + stats['draws'],
        'form': form_data.get(team, '')
    })

# Sort standings
standings.sort(key=lambda x: (-x['points'], -x['gd'], -x['gf']))

# Save to JSON
with open('../data/data.json', 'w') as f:
    json.dump(standings, f, indent=2)

print("Data saved to data.json")"

5.fixtures_scraper.py
"import requests
import json
import re
from datetime import datetime
from bs4 import BeautifulSoup
from pathlib import Path

# Configuration
UNDERSTAT_URL = "https://understat.com/league/EPL"
GAMEWEEK_FILE = Path("../data/gameweek.json")
OUTPUT_FILE = Path("../data/scores_fixtures.json")
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
}

TEAM_CODES = {
    "Nottingham Forest": "NFO",
    "Manchester City": "MCI",
    "Liverpool": "LIV",
    "Newcastle United": "NEW",
    "West Ham": "WHU",
    "Southampton": "SOU",
    "Brighton": "BHA",
    "Fulham": "FUL",
    "Crystal Palace": "CRY",
    "Ipswich": "IPS",
    "Brentford": "BRE",
    "Aston Villa": "AVL",
    "Wolverhampton Wanderers": "WOL",
    "Everton": "EVE",
    "Tottenham": "TOT",
    "Bournemouth": "BOU",
    "Chelsea": "CHE",
    "Leicester": "LEI",
    "Manchester United": "MUN",
    "Arsenal": "ARS"
}

def fetch_understat_matches():
    """Fetch match data from Understat including team codes"""
    response = requests.get(UNDERSTAT_URL, headers=HEADERS)
    soup = BeautifulSoup(response.content, 'html.parser')
    scripts = soup.find_all('script')
    
    matches = []
    
    for script in scripts:
        if script.string and 'datesData' in script.string:
            json_match = re.search(r"JSON\.parse\('(.*?)'\)", script.string)
            if not json_match:
                continue
                
            json_str = json_match.group(1)
            try:
                decoded_json = bytes(json_str, 'utf-8').decode('unicode_escape')
                raw_matches = json.loads(decoded_json)
            except (UnicodeDecodeError, json.JSONDecodeError) as e:
                print(f"Error decoding JSON: {e}")
                return []

            for match in raw_matches:
                try:
                    dt = datetime.strptime(match['datetime'], '%Y-%m-%d %H:%M:%S')
                    home_team = match['h']['title']
                    away_team = match['a']['title']
                    
                    matches.append({
                        "Date": dt.strftime('%Y-%m-%d'),
                        "Time": dt.strftime('%H:%M'),
                        "Home": home_team,
                        "HomeCode": TEAM_CODES[home_team],
                        "Away": away_team,
                        "AwayCode": TEAM_CODES[away_team],
                        "Score": f"{match['goals']['h']}-{match['goals']['a']}" if match.get('isResult') else "TBD",
                        "Played": match.get('isResult', False)
                    })
                except (KeyError, ValueError) as e:
                    print(f"Skipping match due to error: {e}")
                    continue
            break
            
    return sorted(matches, key=lambda x: x['Date'])

def load_gameweek_data():
    """Load pre-existing gameweek data with week numbers"""
    try:
        with open(GAMEWEEK_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"Error loading gameweek data: {e}")
        return []

def create_understat_lookup(understat_matches):
    """Create lookup dictionary based on date and team codes"""
    return {
        (m['Date'], m['HomeCode'], m['AwayCode']): {
            'Score': m['Score'],
            'Played': m['Played']
        }
        for m in understat_matches
    }

def combine_data(gameweek_data, understat_lookup):
    """Merge Understat scores into gameweek data"""
    for match in gameweek_data:
        key = (match['Date'], match['HomeCode'], match['AwayCode'])
        understat_info = understat_lookup.get(key)
        if understat_info is not None:
            match['Score'] = understat_info['Score']
            match['Played'] = understat_info['Played']
        else:
            # Set default values if not found in Understat
            match['Score'] = "TBD"
            match['Played'] = False
    return gameweek_data

def save_data(data):
    """Save combined data to JSON file"""
    try:
        OUTPUT_FILE.parent.mkdir(parents=True, exist_ok=True)
        with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"Successfully saved {len(data)} matches to {OUTPUT_FILE}")
    except IOError as e:
        print(f"Error saving data: {e}")

def main():
    # Fetch data from both sources
    print("Fetching Understat matches...")
    understat_matches = fetch_understat_matches()
    
    print("Loading gameweek data...")
    gameweek_data = load_gameweek_data()
    
    # Create lookup table for Understat scores
    understat_lookup = create_understat_lookup(understat_matches)
    
    # Update gameweek data with scores from Understat
    print("Merging data...")
    combined_data = combine_data(gameweek_data, understat_lookup)
    
    # Verify and save results
    if not combined_data:
        print("No data to save")
        return
    
    missing_score = sum(1 for m in combined_data if m['Score'] == "TBD")
    print(f"Matches without scores: {missing_score}")
    
    save_data(combined_data)
    print("First match sample:", json.dumps(combined_data[0], indent=2))

if __name__ == "__main__":
    main()"

6.  fetch_players.py
"import requests
from bs4 import BeautifulSoup
import json
import re

def fetch_all_players(season='2024', league='EPL'):
    """
    Fetches all Premier League players' data from Understat.com
    
    Parameters:
    - season (str): The season year, e.g., '2023'
    - league (str): League identifier (EPL, La_liga, Bundesliga, etc.)
    
    Returns:
    - List of dictionaries containing complete player data
    """
    url = f'https://understat.com/league/{league}/{season}'
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        soup = BeautifulSoup(response.content, 'html.parser')
        scripts = soup.find_all('script')

        # Extract playersData JSON
        players_data = None
        for script in scripts:
            if 'playersData' in script.text:
                match = re.search(r"playersData\s*=\s*JSON\.parse\('(.*?)'\)", script.text)
                if match:
                    json_str = match.group(1).encode().decode('unicode_escape')
                    players_data = json.loads(json_str)
                    break

        if not players_data:
            print("No player data found in the page")
            return []

        # Extract and format relevant fields for all players
        keys_to_keep = [
            'id', 'player_name', 'games', 'time', 'goals', 'xG', 'assists', 'xA',
            'shots', 'key_passes', 'team_title', 'position', 'yellow_cards',
            'red_cards', 'npg', 'npxG', 'xGChain', 'xGBuildup'
        ]

        return [{
            key: player.get(key, 'N/A') 
            for key in keys_to_keep
        } for player in players_data]

    except requests.exceptions.RequestException as e:
        print(f'Request failed: {e}')
        return []
    except json.JSONDecodeError:
        print('Failed to parse player data')
        return []

def save_players_to_json(players, filename='../data/players.json'):
    """
    Saves player data to a JSON file.
    
    Parameters:
    - players (list): List of player dictionaries
    - filename (str): Name of the output JSON file
    """
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(players, f, ensure_ascii=False, indent=4)
        print(f"Player data successfully saved to {filename}")
    except Exception as e:
        print(f"Error saving player data to JSON: {e}")

if __name__ == '__main__':
    # Fetch all players for the 2024 Premier League season
    all_players = fetch_all_players(season='2024', league='EPL')
    
    if all_players:
        # Print first 10 players for verification
        print(f"Total players fetched: {len(all_players)}")
        for idx, player in enumerate(all_players[:10], 1):
            print(f"\nPlayer #{idx}")
            for key, value in player.items():
                print(f"{key.replace('_', ' ').title()}: {value}")
        
        # Save all player data to players.json
        save_players_to_json(all_players)
    else:
        print("No player data fetched.")"

7. tables.js
"document.addEventListener('DOMContentLoaded', function() {
    const clientSideMappings = {
        "Manchester United": "Man Utd",
        "Manchester City": "Man City",
        "Newcastle United": "Newcastle",
        "Wolverhampton Wanderers": "Wolves",
        "Tottenham Hotspur": "Tottenham",
        "West Ham United": "West Ham",
        "Nottingham Forest": "Nottm Forest",
        "Leicester City": "Leicester",
        "Brighton & Hove Albion": "Brighton",
        "AFC Bournemouth": "Bournemouth",
        "Ipswich Town": "Ipswich"
    };

    function getOrdinal(n) {
        const s = ["th", "st", "nd", "rd"];
        const v = n % 100;
        return (s[(v - 20) % 10] || s[v] || s[0]);
    }

    function formatDateTime(date) {
        const day = date.getDate();
        const month = date.toLocaleString('default', { month: 'long' });
        const year = date.getFullYear();
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        return `${day}${getOrdinal(day)} ${month} ${year} at ${hours}:${minutes}`;
    }

    function showError(message) {
        document.getElementById('loading').style.display = 'none';
        document.getElementById('error').style.display = 'block';
        document.getElementById('error').textContent = message;
    }

    async function loadData() {
        try {
            const response = await fetch('data/data.json');
            if (!response.ok) throw new Error('Network response was not ok');

            const lastModified = response.headers.get('last-modified');
            const updateDate = lastModified ? new Date(lastModified) : new Date();

            const lastUpdatedDiv = document.querySelector('.last-updated');
            lastUpdatedDiv.textContent = `Last Updated ${formatDateTime(updateDate)}`;

            const data = await response.json();

            const tbody = document.querySelector('#leagueTable tbody');
            tbody.innerHTML = data.map((team, index) => `
                <tr class="${[3, 4, 16].includes(index) ? 'separator-row' : ''}">
                    <td>${index + 1}</td>
                    <td class="team-cell">
                        <div class="team-logo-container">
                            <img src="${team.logo}" alt="${team.team}" class="team-logo">
                        </div>
                        <span class="team-name full">${team.team}</span>
                        <span class="team-name short">${clientSideMappings[team.team] || team.team}</span>
                    </td>
                    <td>${team.matches}</td>
                    <td class="mobile-hide">${team.wins}</td>
                    <td class="mobile-hide">${team.draws}</td>
                    <td class="mobile-hide">${team.losses}</td>
                    <td class="mobile-hide">${team.gf}</td>
                    <td class="mobile-hide">${team.ga}</td>
                    <td>${team.gd}</td>
                    <td><strong>${team.points}</strong></td>
                    <td class="mobile-hide">
                        <div class="form-container">
                            ${team.form.split(' ').map((match, index) => `
                                <div class="form-item ${match === 'W' ? 'form-win' : match === 'D' ? 'form-draw' : 'form-loss'}" 
                                     style="--index: ${index}">
                                    ${match}
                                </div>
                            `).join('')}
                        </div>
                    </td>
                </tr>
            `).join('');

            document.getElementById('loading').style.display = 'none';
        } catch (error) {
            showError(`Error loading data: ${error.message}`);
        }
    }

    loadData();
});"

8.scores.js
"let currentGameweek;

function getOrdinal(n) {
    const s = ["th", "st", "nd", "rd"];
    const v = n % 100;
    return s[(v - 20) % 10] || s[v] || s[0];
}

function formatDate(dateString) {
    const date = new Date(dateString + 'T00:00:00Z');
    const options = { weekday: 'long', day: 'numeric', month: 'long' };
    const parts = date.toLocaleDateString('en-GB', options).split(' ');
    const day = parseInt(parts[1]);
    return `${parts[0]} ${day}${getOrdinal(day)} ${parts[2]}`;
}

function formatTimeGMT5(dateStr, timeStr) {
    try {
        const [year, month, day] = dateStr.split('-').map(Number);
        const [hours, minutes] = timeStr.split(':').map(Number);
        const date = new Date(Date.UTC(year, month - 1, day, hours, minutes));
        
        return new Intl.DateTimeFormat('en-US', {
            hour: 'numeric',
            minute: '2-digit',
            timeZone: 'Asia/Karachi', // GMT+5 timezone
            hour12: true
        }).format(date);
    } catch {
        return timeStr; // Fallback to original time
    }
}

async function loadFixtures() {
    try {
        const response = await fetch('data/scores_fixtures.json');
        if (!response.ok) throw new Error('Network response was not ok');
        
        const fixtures = await response.json();
        const grouped = groupByGameweek(fixtures);

        // Get today's date in UTC
        const today = new Date();
        const todayUTC = new Date(Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate()));
        
        // Determine current gameweek
        currentGameweek = findCurrentGameweek(grouped, todayUTC);
        
        renderGameweekButtons(grouped);
        renderFixtures(grouped);
        document.getElementById('loading').style.display = 'none';
    } catch (error) {
        showError(`Error loading fixtures: ${error.message}`);
    }
}

function findCurrentGameweek(groupedFixtures, today) {
    const gameweeks = Object.keys(groupedFixtures)
        .map(Number)
        .sort((a, b) => a - b);

    // Find the latest fully completed gameweek
    let lastCompleted = 0;
    for (const week of gameweeks) {
        const allMatchesPlayed = groupedFixtures[week].every(match => {
            const matchDate = new Date(match.Date + 'T00:00:00Z');
            return matchDate < today;
        });
        
        if (allMatchesPlayed) {
            lastCompleted = week;
        } else {
            break;
        }
    }

    // Current gameweek is next after last completed
    const current = gameweeks.find(w => w > lastCompleted) || gameweeks[gameweeks.length - 1];
    return current || gameweeks[0];
}

function groupByGameweek(fixtures) {
    return fixtures.reduce((acc, fixture) => {
        const week = fixture.Wk;
        if (!acc[week]) acc[week] = [];
        acc[week].push(fixture);
        return acc;
    }, {});
}

function groupByDate(fixtures) {
    return fixtures.reduce((acc, fixture) => {
        const date = formatDate(fixture.Date);
        if (!acc[date]) acc[date] = [];
        acc[date].push(fixture);
        return acc;
    }, {});
}

function renderGameweekButtons(grouped) {
    const buttonsContainer = document.getElementById('gameweek-buttons');
    const gameweeks = Object.keys(grouped).sort((a, b) => a - b);

    buttonsContainer.innerHTML = '';

    gameweeks.forEach(week => {
        const button = document.createElement('button');
        button.className = `gameweek-button ${week == currentGameweek ? 'active' : ''}`;
        button.textContent = `Gameweek ${week}`;
        button.dataset.week = week;
        
        button.addEventListener('click', () => {
            currentGameweek = parseInt(week);
            document.querySelectorAll('.gameweek-button').forEach(b => b.classList.remove('active'));
            document.querySelectorAll('.gameweek-section').forEach(s => s.classList.remove('active'));
            button.classList.add('active');
            document.querySelector(`.gameweek-section[data-week="${week}"]`).classList.add('active');
            scrollToActiveGameweek();
        });

        buttonsContainer.appendChild(button);
    });

    scrollToActiveGameweek();
}

function renderFixtures(grouped) {
    const container = document.getElementById('fixtures-list');
    
    Object.entries(grouped).forEach(([week, matches]) => {
        const section = document.createElement('div');
        section.className = `gameweek-section ${week == currentGameweek ? 'active' : ''}`;
        section.dataset.week = week;
        
        const dateGrouped = groupByDate(matches);
        
        Object.entries(dateGrouped).forEach(([date, dateMatches]) => {
            const dateSection = document.createElement('div');
            dateSection.className = 'date-section';
            
            const dateHeader = document.createElement('div');
            dateHeader.className = 'date-header';
            dateHeader.textContent = date;
            dateSection.appendChild(dateHeader);
            
            const list = document.createElement('ul');
            list.className = 'match-list';
            
            dateMatches.forEach(match => {
                const li = document.createElement('li');
                li.className = 'match-item';
                
                const isCompleted = match.Score && match.Score.includes('-');
                let homeClass = '';
                let awayClass = '';
                let homeScoreClass = '';
                let awayScoreClass = '';

                if (isCompleted) {
                    const scores = match.Score.split('-').map(Number);
                    const homeGoals = scores[0];
                    const awayGoals = scores[1];

                    if (homeGoals > awayGoals) {
                        homeClass = 'winner';
                        awayClass = 'loser';
                        homeScoreClass = '';
                        awayScoreClass = 'loser-score';
                    } else if (awayGoals > homeGoals) {
                        homeClass = 'loser';
                        awayClass = 'winner';
                        homeScoreClass = 'loser-score';
                        awayScoreClass = '';
                    } else {
                        homeClass = 'winner';
                        awayClass = 'winner';
                        homeScoreClass = '';
                        awayScoreClass = '';
                    }
                }

                li.innerHTML = `
                    <div class="team-container home-container">
                        <span class="team-code ${homeClass}">${match.HomeCode}</span>
                        <img class="team-logo" src="logos/${match.HomeCode}.png" alt="${match.Home}">
                    </div>
                    
                    <div class="score-container">
                        ${isCompleted ? 
                            `<div class="score ${homeScoreClass}">${match.Score.split('-')[0]}</div>
                             <div class="score ${awayScoreClass}">${match.Score.split('-')[1]}</div>` :
                            `<div class="match-time">${formatTimeGMT5(match.Date, match.Time)}</div>`
                        }
                    </div>
                    
                    <div class="team-container away-container">
                        <img class="team-logo" src="logos/${match.AwayCode}.png" alt="${match.Away}">
                        <span class="team-code ${awayClass}">${match.AwayCode}</span>
                    </div>
                `;
                
                list.appendChild(li);
            });
            
            dateSection.appendChild(list);
            section.appendChild(dateSection);
        });
        
        container.appendChild(section);
    });
}

function scrollToActiveGameweek() {
    const container = document.querySelector('.gameweek-nav');
    const activeButton = document.querySelector(`.gameweek-button[data-week="${currentGameweek}"]`);
    
    if (activeButton && container) {
        const containerWidth = container.offsetWidth;
        const buttonPosition = activeButton.offsetLeft;
        const buttonWidth = activeButton.offsetWidth;
        container.scrollTo({
            left: buttonPosition - (containerWidth / 2) + (buttonWidth / 2),
            behavior: 'smooth'
        });
    }
}

function showError(message) {
    document.getElementById('loading').style.display = 'none';
    document.getElementById('error').style.display = 'block';
    document.getElementById('error').textContent = message;
}

// Load fixtures when the page loads
window.addEventListener('DOMContentLoaded', loadFixtures);"

9.players.js
"const teamLogoMap = {
    'Manchester City': 'MCI',
    'Liverpool': 'LIV',
    'Chelsea': 'CHE',
    'Manchester United': 'MUN',
    'Tottenham': 'TOT',
    'Arsenal': 'ARS',
    'Leicester City': 'LEI',
    'West Ham': 'WHU',
    'Aston Villa': 'AVL',
    'Everton': 'EVE',
    'Newcastle United': 'NEW',
    'Wolverhampton Wanderers': 'WOL',
    'Brighton': 'BHA',
    'Southampton': 'SOU',
    'Crystal Palace': 'CRY',
    'Brentford': 'BRE',
    'Ipswich': 'IPS',
    'Nottingham Forest': 'NFO',
    'Fulham': 'FUL',
    'Bournemouth': 'BOU'
};

async function loadPlayerStats() {
    try {
        const response = await fetch('data/players.json');
        if (!response.ok) throw new Error('Network response was not ok');
        const players = await response.json();

        // Sort and display data for each stat
        const statContainers = {
            'goals': sorted => displayStatList(sorted, 'goals', '#goals-list'),
            'assists': sorted => displayStatList(sorted, 'assists', '#assists-list'),
            'xG': sorted => displayStatList(sorted, 'xG', '#xg-list'),
            'xA': sorted => displayStatList(sorted, 'xA', '#xa-list'),
            'shots': sorted => displayStatList(sorted, 'shots', '#shots-list'),
            'key_passes': sorted => displayStatList(sorted, 'key_passes', '#key-passes-list'),
            'yellow_cards': sorted => displayStatList(sorted, 'yellow_cards', '#yellow-cards-list'),
            'red_cards': sorted => displayStatList(sorted, 'red_cards', '#red-cards-list')
        };

        Object.entries(statContainers).forEach(([stat, handler]) => {
            const sorted = [...players].sort((a, b) => parseFloat(b[stat]) - parseFloat(a[stat])).slice(0, 10);
            handler(sorted);
        });

        document.getElementById('loading').style.display = 'none';
    } catch (error) {
        showError(`Error loading player data: ${error.message}`);
    }
}

function displayStatList(players, statType, containerId) {
    const container = document.querySelector(containerId);
    let html = '';
    
    players.forEach((player, index) => {
        const logoAbbreviation = teamLogoMap[player.team_title] || 'DEF';
        const statValue = ['xG', 'xA'].includes(statType) 
            ? parseFloat(player[statType]).toFixed(2)
            : player[statType];
        
        html += `
            <div class="player-row">
                <div class="rank">${index + 1}</div>
                <img class="club-logo" src="logos/${logoAbbreviation}.png" alt="${player.team_title}">
                <div class="player-name">${player.player_name}</div>
                <div class="stat-number">${statValue}</div>
            </div>
        `;
    });
    
    container.innerHTML = html;
}

function showError(message) {
    document.getElementById('loading').style.display = 'none';
    const errorElement = document.getElementById('error');
    errorElement.style.display = 'block';
    errorElement.textContent = message;
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', loadPlayerStats);"

10. scores_fixtures.json snippet 
"[
  {
    "Wk": 1,
    "Date": "2024-08-16",
    "Time": "20:00",
    "Home": "Manchester Utd",
    "HomeCode": "MUN",
    "Score": "1-0",
    "Away": "Fulham",
    "AwayCode": "FUL",
    "Played": true
  },"

11. players.json snippet 
"[
    {
        "id": "1250",
        "player_name": "Mohamed Salah",
        "games": "28",
        "time": "2496",
        "goals": "25",
        "xG": "20.112072467803955",
        "assists": "17",
        "xA": "11.478895667940378",
        "shots": "101",
        "key_passes": "62",
        "team_title": "Liverpool",
        "position": "F M",
        "yellow_cards": "1",
        "red_cards": "0",
        "npg": "18",
        "npxG": "14.783890563994646",
        "xGChain": "34.070597656071186",
        "xGBuildup": "10.158531453460455"
    },"
12. data.json snippet 
"[
  {
    "team": "Liverpool",
    "logo": "logos/LIV.png",
    "matches": 28,
    "wins": 20,
    "draws": 7,
    "losses": 1,
    "gf": 66,
    "ga": 26,
    "gd": 40,
    "points": 67,
    "form": "D W D W W"
  },"

13. gameweek.json  snippet 
"{
    "Wk": 38,
    "Date": "2025-05-25",
    "Time": "16:00",
    "Home": "Tottenham",
    "HomeCode": "TOT",
    "Score": "",
    "Away": "Brighton",
    "AwayCode": "BHA"
  }
]"

14. common.css
"/* ====== Global Styles ====== */
body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, sans-serif;
    margin: 0;
    background: white;
    color: #333;
    line-height: 1.6;
}

/* ====== Navigation Bars ====== */
.global-nav {
    background: #121212;
    padding: 0 16px;
    position: relative;
    z-index: 1000;
    border-bottom: 1px solid #000;
}

.nav-container {
    max-width: 1248px;
    margin: 0 auto;
    height: 47px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
}

.sub-nav {
    background: #1a1a1a;
    border-bottom: 1px solid #000;
    overflow-x: hidden;
}

.sub-nav-container {
    max-width: 1248px;
    margin: 0 auto;
    padding: 0 16px;
    display: flex;
    height: 40px;
    align-items: center;
}

.sub-nav-link {
    color: rgba(255,255,255,0.7);
    text-decoration: none;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, sans-serif;
    font-size: 10.5px;
    font-weight: 400;
    padding: 0 12px;
    white-space: nowrap;
    height: 100%;
    display: flex;
    align-items: center;
    border-left: 3px solid transparent;
    transition: all 0.2s ease;
}

.sub-nav-link.active {
    color: #fff;
    background-color: rgba(255,255,255,0.05);
}

.sub-nav-link:hover {
    color: #fff;
    background-color: rgba(255,255,255,0.03);
}

.mobile-menu-btn {
    display: block;
    background: none;
    border: none;
    color: white;
    padding: 5px;
    margin-right: 12px;
    order: -1;
    position: relative;
    width: 20px;
    height: 14px;
}

.mobile-menu-btn::before,
.mobile-menu-btn::after {
    content: '';
    position: absolute;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: white;
}

.mobile-menu-btn::before {
    top: 0;
}

.mobile-menu-btn::after {
    bottom: 0;
}

.mobile-menu-btn span {
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 100%;
    height: 2px;
    background-color: white;
}

/* ====== Loading and Error States ====== */
.loading {
    text-align: center;
    padding: 20px;
    font-size: 1.2rem;
    color: #6c757d;
    animation: pulse 1.5s infinite;
}

@keyframes pulse {
    0% { opacity: 1 }
    50% { opacity: 0.5 }
    100% { opacity: 1 }
}

.error {
    color: red;
    text-align: center;
}"

15. scores.css
"/* Fixtures Container */
.fixtures-container {
    max-width: 1000px;
    margin: 20px auto;
    padding: 0 20px;
}

h1 {
    font-weight: 700;
    color: #1a2634;
    margin: 1.5rem 0;
    font-size: 2rem;
    text-align: center;
}

/* Gameweek Navigation */
.gameweek-nav {
    overflow-x: auto;
    padding: 12px 16px;
    background: #f8f9fa;
    margin-bottom: 20px;
    border-bottom: 1px solid #e0e0e0;
    border-radius: 8px;
}

.gameweek-buttons {
    display: flex;
    gap: 8px;
    padding-bottom: 4px;
}

.gameweek-button {
    padding: 8px 16px;
    border: 1px solid #e0e0e0;
    border-radius: 20px;
    background: white;
    cursor: pointer;
    white-space: nowrap;
    font-size: 14px;
    transition: all 0.2s ease;
}

.gameweek-button.active {
    background: #1a2634;
    color: white;
    border-color: #1a2634;
}

/* Fixtures Layout */
.gameweek-section {
    display: none;
    margin-bottom: 30px;
}

.gameweek-section.active {
    display: block;
}

.date-section {
    margin-bottom: 25px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    overflow: hidden;
}

.date-header {
    background: #f8f9fa;
    padding: 12px 16px;
    border-bottom: 1px solid #e0e0e0;
    font-weight: 600;
    color: #2c3e50;
    text-align: center;
    text-transform: uppercase;
    font-size: 0.9em;
}

.match-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.match-item {
    padding: 16px;
    border-bottom: 1px solid #eee;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 20px;
}

.match-item:nth-child(odd) {
    background-color: white;
}

.match-item:nth-child(even) {
    background-color: #f8f9fa;
}

.match-item:last-child {
    border-bottom: none;
}

.team-container {
    display: flex;
    align-items: center;
    gap: 12px;
    flex: 1;
}

.home-container {
    justify-content: flex-end;
}

.away-container {
    justify-content: flex-start;
}

.team-logo {
    width: 36px;
    height: 36px;
    object-fit: contain;
}

.score-container {
    display: flex;
    align-items: center;
    gap: 8px;
    min-width: 90px;
    justify-content: center;
}

.score {
    font-weight: 600;
    background: #f8f9fa;
    padding: 6px 18px;
    border-radius: 4px;
    text-align: center;
}

.match-time {
    color: #000;
    font-size: 0.9em;
}

.team-code {
    font-weight: bold;
}

.winner {
    color: #000;
}

.loser {
    color: #808080;
}

.loser-score {
    color: #808080;
}

@media (max-width: 768px) {
    h1 {
        font-size: 1.5rem;
        margin: 1rem 0;
    }
    
    .match-item {
        padding: 12px;
        gap: 0px;
    }
    
    .team-logo {
        width: 28px;
        height: 28px;
    }
    
    .score {
        padding: 4px 12px;
    }
  }"

16. players.css
"/* Players Page Specific Styles */
.main-heading {
    font-weight: 700;
    color: #1a2634;
    margin: 1.5rem 0;
    font-size: 2rem;
    text-align: center;
}

.stats-container {
    max-width: 1248px;
    margin: 20px auto;
    padding: 0 20px;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 30px;
}

.stat-box {
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 45px;
}

.stat-title {
    background: #f8f9fa;
    padding: 16px 20px;
    border-bottom: 1px solid #e0e0e0;
    font-weight: 700;
    color: #2c3e50;
    margin: 0;
    font-size: 1em;
    text-align: left;
    letter-spacing: 0.5px;
}

.player-row {
    display: flex;
    align-items: center;
    padding: 10px 16px;
    border-bottom: 1px solid #eee;
    gap: 5px;
    min-height: 20px;
}

.player-row:nth-child(odd) {
    background-color: white;
}

.player-row:nth-child(even) {
    background-color: #f8f9fa;
}

.player-row:last-child {
    border-bottom: none;
}

.rank {
    width: 10px;
    text-align: left;
    font-weight: 600;
    font-size: 1em;
    margin-right: 15px;
    color: #666;
}

.club-logo {
    width: 23px;
    height: 23px;
    margin: 0 0px;
}

.player-name {
    flex-grow: 1;
    font-weight: 500;
    font-size: 1em;
    padding-right: 8px;
}

.stat-number {
    width: 50px;
    text-align: right;
    font-weight: 700;
    font-size: 1.1em;
    color: #1a2634;
}

@media (max-width: 768px) {
    .stats-container {
        grid-template-columns: 1fr;
        gap: 20px;
        padding: 0 15px;
    }
    
    .main-heading {
        font-size: 1.5rem;
        margin: 1rem 0;
    }
    
    .rank {
        margin-right: 15px;
    }
    
    .club-logo {
        margin: 0 0px;
    }
}"

17.table.css
"/* ====== Table Container ====== */
.table-container {
    max-width: 1000px;
    margin: 20px auto;
    padding: 0 20px;
}

h1 {
    font-weight: 700;
    color: #1a2634;
    margin: 1.5rem 0;
    font-size: 2rem;
    text-align: center;
}

table {
    width: 100%;
    border-collapse: collapse;
    background: white;
    box-shadow: 0 2px 15px rgba(0,0,0,0.1);
    font-size: 0.95rem;
}

th, td {
    padding: 12px;
    text-align: center;
}

th {
    font-weight: 600;
    letter-spacing: 0.05em;
    background: #f8f9fa;
    color: #2c3e50;
    border-bottom: 3px solid #1a2634;
    padding: 14px 12px;
    position: sticky;
    top: 0;
}

tr {
    border-bottom: 1px solid #ddd;
    transition: background-color 0.2s ease;
}

tr:hover {
    background-color: #f1f3f5 !important;
}

tr:nth-child(even) {
    background-color: #f8f9fa;
}

.team-cell {
    text-align: left;
    display: flex;
    align-items: center;
    min-width: 220px;
    max-width: none;
}

.team-logo-container {
    width: 34px;
    height: 34px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 12px;
    border-radius: 50%;
    overflow: hidden;
    flex-shrink: 0;
    background: #fff;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.team-logo {
    max-width: 80%;
    max-height: 80%;
}

.team-name {
    white-space: nowrap;
    overflow: visible;
    text-overflow: clip;
    font-weight: bold;
    font-size: 1.05rem;
    letter-spacing: -0.02em;
}

.team-name.short { display: none; }
.team-name.full { display: inline; }

.separator-row {
    border-bottom: 2px solid #1a2634 !important;
}

/* ====== Form Styling ====== */
.form-container {
    display: flex;
    gap: 4px;
    position: relative;
    padding-right: 8px;
}

.form-item {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.8rem;
    font-weight: bold;
    flex-shrink: 0;
    opacity: calc(0.4 + (0.15 * var(--index)));
    transition: transform 0.2s ease;
}

.form-item:hover {
    transform: scale(1.1);
    z-index: 1;
    position: relative;
}

.form-win { background: #4CAF50; color: white; }
.form-draw { background: #757575; color: white; }
.form-loss { background: #f44336; color: white; }

/* ====== Key Container ====== */
.key-container {
    background: white;
    box-shadow: 0 1px 3px rgba(0,0,0,0.12);
    padding: 12px;
    margin-top: 20px;
    max-width: 1000px;
    margin: 20px auto 0;
    border-radius: 8px;
    border: 1px solid #e9ecef;
}

.key-container h2 {
    background: #f5f5f5;
    color: #2c3e50;
    padding: 12px;
    margin: -12px -12px 12px -12px;
    font-size: 1.2em;
    font-weight: bold;
    border-radius: 8px 8px 0 0;
}

.key-container ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.key-container li {
    margin-bottom: 8px;
    font-size: 0.75em;
    position: relative;
    padding-left: 20px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.key-container li::before {
    content: '';
    width: 12px;
    height: 12px;
    border-radius: 2px;
    background: currentColor;
    position: absolute;
    left: 0;
}

/* ====== Last Updated ====== */
.last-updated {
    text-align: center;
    margin: 15px auto;
    color: #6c757d;
    font-size: 0.85rem;
    font-weight: 500;
    max-width: 1000px;
}

/* Responsive Styles */
@media (max-width: 900px) and (orientation: landscape) {
    .table-container {
        max-width: 95vw;
    }
    
    th, td {
        padding: 8px 6px;
        font-size: 0.9rem;
    }
    
    .team-logo-container {
        width: 28px;
        height: 28px;
    }
    
    .team-name {
        font-size: 0.95rem;
    }
    
    .form-item {
        width: 20px;
        height: 20px;
    }
}

@media (max-width: 600px) {
    h1 {
        font-size: 1.5rem;
        margin: 1rem 0;
    }
    
    th, td {
        padding: 10px 6px;
        font-size: 15px;
    }
    
    .team-logo-container {
        width: 20px;
        height: 20px;
        margin-right: 4px;
    }
    
    .mobile-hide {
        display: none;
    }
    
    .table-container {
        padding: 0 5px;
    }
    
    .team-cell {
        max-width: 140px;
        min-width: unset;
    }
    
    .key-container {
        padding: 8px;
        margin-top: 15px;
    }
    
    .key-container h2 {
        padding: 8px;
        margin: -8px -8px 8px -8px;
        font-size: 1em;
    }
    
    .key-container li {
        font-size: 0.75em;
    }
    
    .last-updated {
        font-size: 13px;
    }
    
    .team-name.short { display: inline; }
    .team-name.full { display: none; }
    .team-name {
        white-space: normal;
        overflow: visible;
    }
    
    .form-item {
        width: 18px;
        height: 18px;
        font-size: 0.65rem;
    }
}"
18. logos/ARS.png
 logos/AVL.png
etc

19. update.yml
"name: Update Data

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:     # Allow manual triggering

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    # Step 4: Run all scrapers
    - name: Run scrapers
      working-directory: ./scripts  # Add this
      run: |
        python scrape.py
        python fixtures_scraper.py
        python fetch_players.py

    # Step 5: Commit and push changes
    - name: Commit and push changes
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add data/*.json  # Modified path
        git commit -m "Auto-update data: $(date -u +'%Y-%m-%d %H:%M') UTC"
        git pull --rebase
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}"
